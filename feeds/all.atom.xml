<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>YD's Blog</title><link href="/" rel="alternate"></link><link href="aady5566.github.io/feeds/all.atom.xml" rel="self"></link><id>/</id><updated>2016-05-16T19:00:00+08:00</updated><entry><title>Intalling Redis on Docker</title><link href="/intalling-redis-on-docker.html" rel="alternate"></link><published>2016-05-16T19:00:00+08:00</published><author><name>YD</name></author><id>tag:,2016-05-16:intalling-redis-on-docker.html</id><summary type="html">&lt;script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"&gt;
MathJax.Hub.Config({
  tex2jax: {
    inlineMath: [ ['$','$'], ['\\(','\\)'] ]
  }
});
(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
})(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

ga('create', 'UA-77164531-1', 'auto');
ga('send', 'pageview');

&lt;/script&gt;

&lt;p&gt;我們要先利用Dockerfile建立一個docker的映像檔：&lt;br /&gt;
&lt;pre&gt;
FROM        ubuntu:14.04
RUN         apt-get update &amp;amp;&amp;amp; apt-get install -y redis-server
EXPOSE      6379
ENTRYPOINT  ["/usr/bin/redis-server"]
&lt;/pre&gt;&lt;br /&gt;
&lt;br&gt;
且檔名為Dockerfile。這時候還沒有建任何的映像檔，直到輸入下列指令：&lt;br /&gt;
&lt;pre&gt;
docker build -t &lt;your username&gt;/redis &lt;Dockerfile path&gt; //上層目錄
&lt;/pre&gt;&lt;br /&gt;
&lt;br&gt;
接著我們根據建好的映像檔來啟一個容器並命名為 &lt;code&gt;redis&lt;/code&gt; 。 &lt;code&gt;-d&lt;/code&gt; 表容器處於detached mode，也就是容器會在背景執行。 &lt;code&gt;-p&lt;/code&gt; 則是希望container能連接到localhost端：&lt;br /&gt;
&lt;pre&gt;
$ docker run --name redis -p 6379:6379 -d &lt;your username&gt;/redis
&lt;/pre&gt;&lt;br /&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;方法二&lt;/h2&gt;

&lt;hr /&gt;
&lt;p&gt;另一個方法是我們讓 &lt;code&gt;redis&lt;/code&gt; 與 &lt;code&gt;db&lt;/code&gt; 透過 &lt;code&gt;--link&lt;/code&gt; 連結。並進入容器的bash模式：&lt;br /&gt;
&lt;pre&gt;
docker run --link redis:db -i -t ubuntu:14.04 /bin/bash
&lt;/pre&gt;&lt;br /&gt;
&lt;br&gt;
並執行：&lt;br /&gt;
&lt;pre&gt;
$sudo apt-get update
$sudo apt-get install redis-server
$sudo service redis-server stop
&lt;/pre&gt;&lt;br /&gt;
&lt;br&gt;
又因前述使用了 &lt;code&gt;--link redis:db&lt;/code&gt; ，Docker在我們的容器內已生成了環境變數：&lt;br /&gt;
&lt;pre&gt;
$ env | grep DB_&lt;/p&gt;
&lt;p&gt;//Should return something similar to this with your values
DB_NAME=/violet_wolf/db
DB_PORT_6379_TCP_PORT=6379
DB_PORT=tcp://172.17.0.33:6379
DB_PORT_6379_TCP=tcp://172.17.0.33:6379
DB_PORT_6379_TCP_ADDR=172.17.0.33
DB_PORT_6379_TCP_PROTO=tcp
&lt;/pre&gt;&lt;br /&gt;
&lt;br&gt;
接著就可以在container內下redis-cli指令後，進行redis指令的操作了!&lt;br /&gt;
&lt;pre&gt;
$ redis-cli -h $DB_PORT_6379_TCP_ADDR
$ redis 172.17.0.33:6379&amp;gt;
$ redis 172.17.0.33:6379&amp;gt; set docker awesome
OK
$ redis 172.17.0.33:6379&amp;gt; get docker
"awesome"
$ redis 172.17.0.33:6379&amp;gt; exit
&lt;/pre&gt;&lt;br /&gt;
&lt;br&gt;
因為前述已經使用 &lt;code&gt;-p 6379:6379&lt;/code&gt; 此時已經可以透過api連到外面去了! (e.g. 192.168.99.100:6379)&lt;br /&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h2&gt;額外補充&lt;/h2&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;筆記一： 如果要重新啟動container? $docker start &lt;redisName&gt; 即可。  &lt;/p&gt;
&lt;p&gt;筆記二： 若不知道無核再次於docker內操作redis?&lt;br /&gt;
&lt;pre&gt;
$docker start ydredis //後進入bash模式
$docker exec -it ydredis bash //接著必須先查看一下docker engine此時賦予container的ip
$ifconfig //查看ip
$redis-cli -h &lt;ip&gt; //就可以開始下redis指令了!
&lt;/pre&gt;&lt;/p&gt;</summary><category term="docker"></category><category term="redis"></category></entry><entry><title>Spark Installation On OS X</title><link href="/spark-installation-on-os-x.html" rel="alternate"></link><published>2016-05-14T09:00:00+08:00</published><author><name>YD</name></author><id>tag:,2016-05-14:spark-installation-on-os-x.html</id><summary type="html">&lt;script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"&gt;
MathJax.Hub.Config({
  tex2jax: {
    inlineMath: [ ['$','$'], ['\\(','\\)'] ]
  }
});
(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
})(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

ga('create', 'UA-77164531-1', 'auto');
ga('send', 'pageview');

&lt;/script&gt;

&lt;p&gt;&lt;img class='shaped'
src="https://raw.githubusercontent.com/aady5566/aady5566.github.io/master/pic/spark.png" width="450" height="384" /&gt;&lt;br /&gt;
&lt;br&gt;
這次的心得分享為安裝spark和使用mllib的範例，那就分兩個部分介紹吧！&lt;br /&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h2&gt;安裝Spark&lt;/h2&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;透過Homebrew安裝最新版本的Spark
&lt;br&gt;
&lt;pre&gt;
$brew install apache-spark
&lt;/pre&gt;&lt;br /&gt;
&lt;br&gt;
安裝完後，理論上已經可以執行spark-shell了，不過我們再修改一下log的級別，以減少冗長的log。首先先進去spark的路徑，例如我的為 &lt;code&gt;/usr/local/Cellar/apache-spark/1.2.0/libexec/conf&lt;/code&gt; (1.2.0為Spark版本)
&lt;pre&gt;
$cd /usr/local/Cellar/apache-spark/1.2.0/libexec/conf
&lt;/pre&gt;&lt;br /&gt;
&lt;br&gt;
複製log4j模板進上述的路徑&lt;br /&gt;
&lt;pre&gt;
$cp log4j.properties.template log4j.properties
&lt;/pre&gt;&lt;br /&gt;
&lt;br&gt;
接著修改log4j.properties檔
&lt;br&gt;
&lt;pre&gt;
$vim log4j.properties
&lt;/pre&gt;&lt;br /&gt;
&lt;br&gt;
將 &lt;strong&gt;&lt;em&gt;INFO&lt;/em&gt;&lt;/strong&gt; 改為 &lt;strong&gt;&lt;em&gt;ERROR&lt;/em&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;code&gt;log4j.rootCategory=ERROR, console&lt;/code&gt;&lt;br /&gt;
&lt;br&gt;
&lt;br&gt;
然後就可以執行看看spark-shell了!
&lt;br&gt;
&lt;pre&gt;
$cd /usr/local/Cellar/apache-spark/1.2.0
$./bin/spark-shell
&lt;/pre&gt;&lt;br /&gt;
&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;MLlib Demo&lt;/h2&gt;

&lt;hr /&gt;
&lt;p&gt;以ALS為例，首先安裝相依套件&lt;br /&gt;
&lt;br&gt;
&lt;pre&gt;
import org.apache.spark.mllib.recommendation.ALS
import org.apache.spark.mllib.recommendation.MatrixFactorizationModel
import org.apache.spark.mllib.recommendation.Rating&lt;/p&gt;
&lt;p&gt;val data = sc.textFile("libexec/data/mllib/als/ydtest.data")
val ratings = data.map(_.split(',') match { case Array(user, item, rate) =&amp;gt;
  Rating(user.toInt, item.toInt, rate.toDouble)
})&lt;/p&gt;
&lt;p&gt;// Build the recommendation model using ALS
val rank = 10
val numIterations = 10
val model = ALS.train(ratings, rank, numIterations, 0.01)&lt;/p&gt;
&lt;p&gt;// Evaluate the model on rating data
val usersProducts = ratings.map { case Rating(user, product, rate) =&amp;gt;
  (user, product)
}
val predictions =
  model.predict(usersProducts).map { case Rating(user, product, rate) =&amp;gt;
    ((user, product), rate)
  }
val ratesAndPreds = ratings.map { case Rating(user, product, rate) =&amp;gt;
  ((user, product), rate)
}.join(predictions)
val MSE = ratesAndPreds.map { case ((user, product), (r1, r2)) =&amp;gt;
  val err = (r1 - r2)
  err * err
}.mean()
println("Mean Squared Error = " + MSE)&lt;/p&gt;
&lt;p&gt;&lt;/pre&gt;&lt;br /&gt;
&lt;br&gt;
比較要注意的是資料輸入的路徑，如果是用 &lt;code&gt;$spark-shell&lt;/code&gt;進入的話，路徑需設為絕對路徑。&lt;/p&gt;</summary><category term="Spark"></category></entry><entry><title>Decision, Regression tree</title><link href="/decision-regression-tree.html" rel="alternate"></link><published>2016-04-27T10:00:00+08:00</published><author><name>YD</name></author><id>tag:,2016-04-27:decision-regression-tree.html</id><summary type="html">&lt;script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"&gt;
MathJax.Hub.Config({
  tex2jax: {
    inlineMath: [ ['$','$'], ['\\(','\\)'] ]
  }
});
(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
})(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

ga('create', 'UA-77164531-1', 'auto');
ga('send', 'pageview');

&lt;/script&gt;

&lt;p&gt;Decision tree 與 Regression tree的概念都是建一顆樹(e.g. binary tree, minimize the traning error in each leaf)且都是&lt;a href="http://aady5566.github.io/supervised-vs-unsupervised-learning.html"&gt;Supervised learning&lt;/a&gt;。差別在於資料形態的不同：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Decision tree: $x_i \in \mathbb{R}, y_i \in $ { $ Finite~Set $ }$ $&lt;/li&gt;
&lt;li&gt;Regression tree: $x_i \in \mathbb{R}, y_i \in \mathbb{R}$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Decision tree會有類別變項：  &lt;/p&gt;
&lt;p&gt;&lt;img class='shaped' src="https://raw.githubusercontent.com/aady5566/aady5566.github.io/master/pic/decisiontree.png" width="400" height="400" /&gt;  &lt;/p&gt;
&lt;p&gt;利用不斷的二分法將區域切出來。再依照該區的類別採多數決(majority vote of classification)進行分類。如下圖：  &lt;/p&gt;
&lt;p&gt;&lt;img class='shaped' src="https://raw.githubusercontent.com/aady5566/aady5566.github.io/master/pic/decisiontree.png" width="400" height="400" /&gt;  &lt;/p&gt;
&lt;p&gt;但因為採多數決，所以會有區域誤判的可能(下文會提到Impurity Measures來衡量誤判率)。&lt;/p&gt;
&lt;p&gt;先前提到Regression tree 和 Decision tree的差別為資料形態的不同，最簡單的例子即 $x$, $y$ 皆為實數。實際做法會先將 $x$切出好幾個區域(為決策的判斷)，接著在各個區域內得出預測值&lt;br /&gt;
 $\hat{y}$， 此預測值是來自該區依最小平方法得到的: $\bar{y} = min\sum_{i \in \mathbb{R}_k}(\hat{y}-y_i)^2$，即該區的平均值：  &lt;/p&gt;
&lt;p&gt;&lt;img class='shaped' src="https://raw.githubusercontent.com/aady5566/aady5566.github.io/master/pic/regressiontree.png" width="400" height="400" /&gt;   &lt;/p&gt;
&lt;p&gt;因此得到的預測值 $y$ 即為該區的 $\bar{y}$：  &lt;/p&gt;
&lt;p&gt;&lt;img class='shaped' src="https://raw.githubusercontent.com/aady5566/aady5566.github.io/master/pic/regressiontree2.png" width="400" height="400" /&gt;  &lt;/p&gt;
&lt;p&gt;那我們要如何擴充樹葉呢(也就是圖中的每個節點)?
以三維空間舉例：  &lt;/p&gt;
&lt;p&gt;&lt;img class='shaped' src="https://raw.githubusercontent.com/aady5566/aady5566.github.io/master/pic/cube.png" width="400" height="400" /&gt;  &lt;/p&gt;
&lt;p&gt;如果要長regression tree，首先選定一個維度 $j=1$，根據資料點找出點 $s$ 使得 $ \sum_{x_{ij}&amp;gt;s,x_i \in \mathbb{R}_j}(\hat{y}-y_i)^2$  &lt;/p&gt;
&lt;p&gt;加上  &lt;/p&gt;
&lt;p&gt;$\sum_{x_{ij} \leq s,x_i \in \mathbb{R}_j}(\hat{y}-y_i)^2$最小，根據這個原則重複步驟就可以做出一堆的sub-region。&lt;br /&gt;
那到底要切到何時呢?有兩種標準：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Stop when one points in the (sub-)region&lt;/li&gt;
&lt;li&gt;Only consider splits resulting in the (sub-)region with $\geq 5$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;同理，要長decision(classification) tree也是依照類似的方法，以二維平面解釋：  &lt;/p&gt;
&lt;p&gt;&lt;img class='shaped' src="https://raw.githubusercontent.com/aady5566/aady5566.github.io/master/pic/decisiontree3.png" width="400" height="400" /&gt;  &lt;/p&gt;
&lt;p&gt;先定義一下，$E_R$: misclassified by a majority vote in the (sub-)region，以此圖為1/3，算法為 $min \frac{1}{N_{R_j}}\sum_{x_i \in \mathbb{R}_j} I(y_i \neq y) ,~y= ~${$  Finite~Set  $}$, N_R=~ ${$  i:x_i \in \mathbb{R_j}  $}  &lt;/p&gt;
&lt;p&gt;若以三維空間說明的話，則是讓切出的兩區的 $E_{R_j}(j,s)+E_{R_j}'(j,s)$ 最小化：  &lt;/p&gt;
&lt;p&gt;&lt;img class='shaped' src="https://raw.githubusercontent.com/aady5566/aady5566.github.io/master/pic/cube2.png" width="400" height="400" /&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;h3&gt;Impurity Measures&lt;/h3&gt;  &lt;/p&gt;
&lt;p&gt;前述提到分類誤判，衡量一個模型的分類誤判率有三種常見的方式：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$E_R$: $P_R(Y), ~Y= ~${$  Classification Finite~Set  $}&lt;/li&gt;
&lt;li&gt;$H_R$ (Entropy): $-\sum_{y \in Y}(P_R(Y) \cdot \log{P_R(Y)})$&lt;/li&gt;
&lt;li&gt;$G_R$ (Gini's index): $\sum_{y \in Y}(P_R(Y) \cdot (1-P_R(Y)))$&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>K-Nearest Neighbor algorithms (KNN)</title><link href="/k-nearest-neighbor-algorithms-knn.html" rel="alternate"></link><published>2016-04-26T17:00:00+08:00</published><author><name>YD</name></author><id>tag:,2016-04-26:k-nearest-neighbor-algorithms-knn.html</id><summary type="html">&lt;script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"&gt;
MathJax.Hub.Config({
  tex2jax: {
    inlineMath: [ ['$','$'], ['\\(','\\)'] ]
  }
});
(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
})(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

ga('create', 'UA-77164531-1', 'auto');
ga('send', 'pageview');

&lt;/script&gt;

&lt;p&gt;如果我們有一筆資料 $(x_1,y_1),...,(x_n,y_n)$，  &lt;/p&gt;
&lt;p&gt;且 $x_i \in \mathbb{R}^2, y_i \in {0,1}$ (即 $x_i=(x_1,x_2)$為二維的自變項以及 $y_i = 0 ~or~ 1$的依變項)。如圖所示：
&lt;img class='shaped' src="https://raw.githubusercontent.com/aady5566/aady5566.github.io/master/pic/knn.png" width="400" height="400" /&gt;  &lt;/p&gt;
&lt;p&gt;橫軸為 $x_1$、縱軸為 $x_2$、藍色和紅色分別為已知的分類(0或1)。圖中的黃點並非髒污，而是要進行分類的 $x$。  &lt;/p&gt;
&lt;p&gt;KNN的概念其實很就是去算點與點之間的距離，距離越近表示類型越像(和&lt;a href="http://aady5566.github.io/k-means.html"&gt;K-means&lt;/a&gt;有異曲同工之妙，但注意，KNN是屬於&lt;a href="http://aady5566.github.io/supervised-vs-unsupervised-learning.html"&gt;Supervised learning&lt;/a&gt;，這點和K-means不同)。
若 $k=1$，則是根據離黃點最近的「1個點」之分類為分類; $k=3$則是根據離黃點最近的「3個點」之分類為分類並採取多數決(majority vote of k nearest)。以下圖為例：
&lt;img class='shaped' src="https://raw.githubusercontent.com/aady5566/aady5566.github.io/master/pic/knn2.png" width="400" height="400" /&gt;  &lt;/p&gt;
&lt;p&gt;此例為 $k=3$，意即離黃點最近的三個點分別為1,1,0的分類，依照多數決應將黃點分類為類別1。  &lt;/p&gt;
&lt;p&gt;若將KNN寫成公式的話：&lt;br /&gt;
&lt;div style="font-size:150%"&gt;$d(x_i,x_j)=\sqrt{\sum_{k=1}^{d}(x_{ik}-x_{jk})^2}, x_i=(x_{i1},...,x_{id})$&lt;/div&gt;  &lt;/p&gt;
&lt;p&gt;&lt;img class='shaped' src="https://raw.githubusercontent.com/aady5566/aady5566.github.io/master/pic/knndemo.png" width="400" height="400" /&gt;  &lt;/p&gt;
&lt;p&gt;此為 $k=1$的例子，已知紅點距離最近的點為藍色，因此判斷紅色的分類為1。有興趣的話可以參考下列R code。可以自己調整參數玩玩看&lt;/p&gt;
&lt;pre&gt;
# K-Nearest Neighbor classification ---------------------------------------
library(data.table)
library(ggplot2)
#training data
#simplify to two-dimensional real numbers
dt &lt;- data.table(x1=sample(1:10,30,replace=T),x2=sample(1:10,30,replace=T),label=as.factor(sample(0:1,30,replace=T)))

#new x^(2)=(x1,x2)
newX=c(8,7)
k=1 #k could be a odd number

#find out the label of k smallest distances of x
nearestLabels &lt;- dt$label[!is.na(match(sqrt((newX[1]-dt$x1)^2+(newX[2]-dt$x2)^2),sort(sqrt((newX[1]-dt$x1)^2+(newX[2]-dt$x2)^2))[1:k]))]

#majority vote of k nearest points
tb &lt;- as.data.table(table(nearestLabels))
predictLabel &lt;- paste("predict: ",tb$nearestLabels[match(max(tb$N),tb$N)],sep='')
predict.dt &lt;- data.table(x1=newX[1],x2=newX[2],label=predictLabel)

#bind preditVal to original dt
dt &lt;- rbind(predict.dt,dt)

#plot the outcome
qplot(x1,x2,colour=label,data=dt)

&lt;/pre&gt;</summary></entry><entry><title>R2Redshift</title><link href="/r2redshift.html" rel="alternate"></link><published>2016-04-14T11:00:00+08:00</published><author><name>YD</name></author><id>tag:,2016-04-14:r2redshift.html</id><summary type="html">&lt;script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"&gt;
MathJax.Hub.Config({
  tex2jax: {
    inlineMath: [ ['$','$'], ['\\(','\\)'] ]
  }
});
(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
})(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

ga('create', 'UA-77164531-1', 'auto');
ga('send', 'pageview');

&lt;/script&gt;

&lt;p&gt;由R接Redshift的實作。&lt;/p&gt;
&lt;pre&gt;
if (!require(RJDBC)) install.packages("RJDBC")
devtools::install_github("pingles/redshift-r")#api:https://github.com/pingles/redshift-r
library(redshift)

#Open connection
conn &lt;- redshift.connect("jdbc:postgresql://&lt;curl&gt;.ap-northeast-1.redshift.amazonaws.com:5439/&lt;dbName&gt;", "adminName", "password")  

#Set all colNames for getting the intact SQL table  
cols &lt;- redshift.columns(conn,tableName = "&lt;tableName&gt;")#columnNames  

#Query data with SQL syntax
data&lt;- dbGetQuery(conn, paste("SELECT * FROM &lt;tableName&gt; where date_part(hour,datetimeclient)=15 AND convert(varchar(10),datetimeclient)='2016-03-04' AND city_name!='missing' AND mouseposx&gt;0 AND mouseposy&gt;0",sep=''))  

#Close connection
redshift.disconnect(conn)  

&lt;/pre&gt;</summary></entry><entry><title>AWS Identity and Access Management (IAM)</title><link href="/aws-identity-and-access-management-iam.html" rel="alternate"></link><published>2016-03-21T18:50:00+08:00</published><author><name>YD</name></author><id>tag:,2016-03-21:aws-identity-and-access-management-iam.html</id><summary type="html">&lt;script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"&gt;
MathJax.Hub.Config({
  tex2jax: {
    inlineMath: [ ['$','$'], ['\\(','\\)'] ]
  }
});
(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
})(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

ga('create', 'UA-77164531-1', 'auto');
ga('send', 'pageview');

&lt;/script&gt;

&lt;p&gt;Identity and Access Management (IAM)可以讓你管理「用戶們」在AWS服務或資源的使用權限。利用IAM管理的範圍包含活體的aws users, groups或是 軟體的roles and policies。  &lt;/p&gt;
&lt;p&gt;Create users in IAM, assign them individual security credentials, including access keys,
passwords, and multi-factor authentication devices or request temporary security credentials to provide users access to AWS services and resources.  &lt;/p&gt;
&lt;p&gt;Create roles in IAM, and manage policies to control which operations can be performed by the entity, or AWS service, that assumes the role.  &lt;/p&gt;
&lt;p&gt;qwiklab實作部分，儀表板上點選 &lt;strong&gt;IAM&lt;/strong&gt; :  &lt;/p&gt;
&lt;p&gt;範例的Group介紹：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;EC2support group 功能主要是監控其他EC2的狀態  &lt;/li&gt;
&lt;li&gt;EC2admin group 用來&lt;a href="http://www.ems5.com/view.php?id=308"&gt;scale up&lt;/a&gt;伺服&lt;/li&gt;
&lt;li&gt;S3admin group 執行所有S3 相關服務  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;若我們希望讓userone負責監控(EC2support)的工作，選擇左方 &lt;strong&gt;Dashboard&lt;/strong&gt; 的 &lt;strong&gt;Group&lt;/strong&gt;，選擇EC2support後下方的 &lt;strong&gt;User&lt;/strong&gt; 並加入該成員即可。  &lt;/p&gt;
&lt;p&gt;接著我們要對這些用戶客製化密碼。回到IAM選擇儀表板的 &lt;strong&gt;User&lt;/strong&gt;，勾選userone後選擇上方的 &lt;strong&gt;Actions "Manage Password"&lt;/strong&gt; ，進去後選擇"Replace existing password with new custom password"。設好用戶密碼後。
點擊 &lt;strong&gt;Dashboard&lt;/strong&gt;，會有個IAM users sign-in link，屆時所有在這之中的user藉由輸入自己的帳戶以及該用戶密碼就可以取得相對應的權限。而Admin帳戶可以點擊 &lt;strong&gt;User&lt;/strong&gt; 看Password Last Used的使用歷史紀錄。&lt;/p&gt;</summary><category term="AWS"></category></entry><entry><title>AWS Elastic Compute Cloud (EC2)</title><link href="/aws-elastic-compute-cloud-ec2.html" rel="alternate"></link><published>2016-03-19T13:00:00+08:00</published><author><name>YD</name></author><id>tag:,2016-03-19:aws-elastic-compute-cloud-ec2.html</id><summary type="html">&lt;script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"&gt;
MathJax.Hub.Config({
  tex2jax: {
    inlineMath: [ ['$','$'], ['\\(','\\)'] ]
  }
});
(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
})(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

ga('create', 'UA-77164531-1', 'auto');
ga('send', 'pageview');

&lt;/script&gt;

&lt;p&gt;AWS provides pre-configured templates for the instances, known as Amazon Machine Images (AMIs).  &lt;/p&gt;
&lt;p&gt;AMI模板可以只有作業系統，也可以包含預先灌好的程式軟體在內。  &lt;/p&gt;
&lt;p&gt;EC2 is a virtual environment which is called instances. And there are a wide range of instance types that have varying combinations of CPU power, amount of memory, storage size, and networking capacity.  &lt;/p&gt;
&lt;p&gt;EC2 instances will automatically scale up to add capacity&lt;/p&gt;
&lt;p&gt;實作建置EC2:  &lt;/p&gt;
&lt;p&gt;先建立AWSroot帳戶，並新增一個admin帳戶(開所有權限，但沒有付款功能)，之後都用該帳戶當作控管其他服務的帳戶。  &lt;/p&gt;
&lt;p&gt;登入admin後，在AWS主頁面上，可以點擊Edit將常用的instances拖曳到上方的儀表板。  &lt;/p&gt;
&lt;p&gt;點選EC2服務，選Launch Instance，這時可以勾選旁邊的Free tier only，秀出來的映像檔皆是免費的。然後就選擇自己想要的作業系統並點選右方的Select。接著看到是Instance Type有free tier eligible(通常是微型)，接著就在設定DNS頁面，以及對於instance的命名，再來是連線方式設定，初始含SSH連線，記得如果要從外部網域連入，要security group的inbound設定http連線。  &lt;/p&gt;
&lt;p&gt;最後要創建一個key-pairs，首先是key的命名可以依照 &lt;strong&gt;aws服務_instance型態_作業系統_區域.pem&lt;/strong&gt; 例如： &lt;strong&gt;ec2_t2m_linux_tokyo.pem&lt;/strong&gt; ，然後下載到本地端（這裏要注意，因為下載下來要改一下key的權限，因為可能是public key，但做匹配時只能是private key, chmod 600 &lt;keyname&gt;.pem即可），key-pairs之所以重要是因為，ssh連線到該instance它只認對應的private key，若遺失了就無法操控instance。  &lt;/p&gt;
&lt;p&gt;實作EC2安裝Docker:&lt;a href="http://docs.aws.amazon.com/AmazonECS/latest/developerguide/docker-basics.html"&gt;官方文件&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;執行 sudo usermod -a -G docker ec2-user 就不需要再加上sudo了&lt;/p&gt;</summary><category term="AWS"></category></entry><entry><title>魯蛇家庭</title><link href="/lu-she-jia-ting.html" rel="alternate"></link><published>2016-03-18T23:00:00+08:00</published><author><name>YD</name></author><id>tag:,2016-03-18:lu-she-jia-ting.html</id><summary type="html">&lt;script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"&gt;
MathJax.Hub.Config({
  tex2jax: {
    inlineMath: [ ['$','$'], ['\\(','\\)'] ]
  }
});
(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
})(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

ga('create', 'UA-77164531-1', 'auto');
ga('send', 'pageview');

&lt;/script&gt;

&lt;p&gt;版上看到一篇「突然意識到自己生在魯蛇家庭」，莫名想哭。大學畢業後，特別有感，不時在臉書動態看到誰誰誰已經在美國工作，誰誰誰準備要出國唸書，即使是貴得嚇人的MBA。「沒關係，只要專心準備GRE、托福、GMAT，錢的部分家裡負擔。」
因為臉書朋友來自薇閣或台大，多來自中產以上的菁英階級家庭。樣本本身就有極大的偏誤，理應看久要習慣的，但說不羨慕那些「又努力又有豐厚資源」的朋友是騙人的。
每次看到這種文章心情就有說不出來的複雜感，一方面因同情困苦造就生命的刻苦銘心，也因努力而有成的態度所感動，另一方面也憤慨多少比例能靠著拼命努力而被發掘的案例...
不過換個角度思考，表象的好與壞也從來不是旁觀者解讀了算，自己的生活過得坦蕩蕩比較要緊。&lt;/p&gt;</summary><category term="Life"></category></entry><entry><title>彈性</title><link href="/dan-xing.html" rel="alternate"></link><published>2016-03-15T22:00:00+08:00</published><author><name>YD</name></author><id>tag:,2016-03-15:dan-xing.html</id><summary type="html">&lt;script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"&gt;
MathJax.Hub.Config({
  tex2jax: {
    inlineMath: [ ['$','$'], ['\\(','\\)'] ]
  }
});
(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
})(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

ga('create', 'UA-77164531-1', 'auto');
ga('send', 'pageview');

&lt;/script&gt;

&lt;p&gt;&lt;img  src="https://raw.githubusercontent.com/aady5566/aady5566.github.io/master/pic/work.png" width="300" height="300" align="middle"/&gt;&lt;/p&gt;
&lt;p&gt;『奇怪，你怎麼沒去上班？』現在回學校都會被問這個問題，我第一個直覺的想法和大家一樣：好像很爽喔！但其實仔細想想，工作到現在也大概快三週了，每周花在工作的時間應該超過75小時。我自己是個很重視生活品質的人，但又有點工作狂的特質。要滿足這兩個狀態，總是要有一些變通的方式。就好比，我不喜歡待在一個環境久坐，這對我來說是非常痛苦的事情，如果待在公司 ，久坐是必然的發生的事，但我有個習慣，盡量保持馬克杯流動的狀態，意思是邊工作邊喝水，這樣的話除了保持水分外，身體也會定期提出上廁所的訊號，這時我就會起來走動一下，然後再次裝水，邊工作邊喝水的循環重啟了。最好的情況是讓自己換個環境工作，做任何事都要適度的放鬆，換個環境會讓五感接收到新鮮的刺激，這對思考有所助益，因此我認為，上班打卡報到是一件非常奴的行為，講實在，真的想工作，隨時都可以工作。&lt;/p&gt;</summary><category term="Life"></category></entry><entry><title>景仰對象</title><link href="/jing-yang-dui-xiang.html" rel="alternate"></link><published>2016-03-10T23:51:00+08:00</published><author><name>YD</name></author><id>tag:,2016-03-10:jing-yang-dui-xiang.html</id><summary type="html">&lt;script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"&gt;
MathJax.Hub.Config({
  tex2jax: {
    inlineMath: [ ['$','$'], ['\\(','\\)'] ]
  }
});
(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
})(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

ga('create', 'UA-77164531-1', 'auto');
ga('send', 'pageview');

&lt;/script&gt;

&lt;p&gt;今天被問到「有沒有景仰的對象」這件事，我第一個直覺是&amp;lt;&amp;lt;等一個人咖啡&amp;gt;&amp;gt;內的阿拓。&lt;br /&gt;
我欣賞他憨厚直爽的態度，他待人真誠，且時時保有「盡一己之力又何妨」的態度對待需要幫助的周遭朋友。
另外就是有一個觀念真的很棒，「生氣?過了一天、一年或甚至十年之後，還會記得此事嗎?如果不會，那幹嘛生氣?」，真的很欣賞他。儘管是小說角色，從國中以來就很羨慕這樣樂天的態度。  &lt;br /&gt;
如果要說現實中景仰的對象，不如說我對是認真、持之以恆的態度在過生活的人特別欣賞，也一直努力保持這樣的態度過生活。但通常認真的人往往會忽略自己身體的健康，例如挑燈半夜讀書、睡眠時間不固定、飲食不正常等，這種生活態度我就不欣賞了，除非到要命時刻否則不熬夜！這邊要特別講一下，前年在新訓單位擔任輔導長一職時，幾乎11點前準時睡覺(除非查哨)，還不是平安退伍了。沒有什麼比健康更重要的事，一旦生病，什麼事做起來都不開心。&lt;/p&gt;</summary></entry><entry><title>工作兩週</title><link href="/gong-zuo-liang-zhou.html" rel="alternate"></link><published>2016-03-09T23:27:00+08:00</published><author><name>YD</name></author><id>tag:,2016-03-09:gong-zuo-liang-zhou.html</id><summary type="html">&lt;script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"&gt;
MathJax.Hub.Config({
  tex2jax: {
    inlineMath: [ ['$','$'], ['\\(','\\)'] ]
  }
});
(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
})(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

ga('create', 'UA-77164531-1', 'auto');
ga('send', 'pageview');

&lt;/script&gt;

&lt;p&gt;雖然說轉正以後，忽然手上變成四個案子在處理，忙到炸掉，前一週還在調適期。儘管忙，但工作性質實在是太符合我的生活型態了，環境單純，上班時間彈性，穿著隨便，工作任務也是自己預想的資料分析與視覺化呈現...在台灣應該也很難找到類似的工作性質了吧@@。當然中程目標是能夠增加運算效率以及更快部署前端的資料視覺化，遠程目標是能夠獨立從後端伺服器串接前端網頁的呈現。&lt;/p&gt;</summary><category term="Life"></category></entry><entry><title>Lines and Columns</title><link href="/lines-and-columns.html" rel="alternate"></link><published>2016-03-09T23:20:00+08:00</published><author><name>YD</name></author><id>tag:,2016-03-09:lines-and-columns.html</id><summary type="html">&lt;script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"&gt;
MathJax.Hub.Config({
  tex2jax: {
    inlineMath: [ ['$','$'], ['\\(','\\)'] ]
  }
});
(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
})(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

ga('create', 'UA-77164531-1', 'auto');
ga('send', 'pageview');

&lt;/script&gt;

&lt;iframe srcdoc=' &amp;lt;!doctype HTML&amp;gt;
&amp;lt;meta charset = &amp;#039;utf-8&amp;#039;&amp;gt;
&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;

    &amp;lt;script src=&amp;#039;//code.jquery.com/jquery-1.9.1.min.js&amp;#039; type=&amp;#039;text/javascript&amp;#039;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&amp;#039;//code.highcharts.com/highcharts.js&amp;#039; type=&amp;#039;text/javascript&amp;#039;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&amp;#039;//code.highcharts.com/highcharts-more.js&amp;#039; type=&amp;#039;text/javascript&amp;#039;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&amp;#039;//code.highcharts.com/modules/exporting.js&amp;#039; type=&amp;#039;text/javascript&amp;#039;&amp;gt;&amp;lt;/script&amp;gt;

    &amp;lt;style&amp;gt;
    .rChart {
      display: block;
      margin-left: auto;
      margin-right: auto;
      width: 700px;
      height: 350px;
    }
    &amp;lt;/style&amp;gt;

  &amp;lt;/head&amp;gt;
  &amp;lt;body &amp;gt;

    &amp;lt;div id = &amp;#039;chart59c7b825599&amp;#039; class = &amp;#039;rChart highcharts&amp;#039;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;script type=&amp;#039;text/javascript&amp;#039;&amp;gt;
    (function($){
        $(function () {
            var chart = new Highcharts.Chart({
 &amp;quot;dom&amp;quot;: &amp;quot;chart59c7b825599&amp;quot;,
&amp;quot;width&amp;quot;:            700,
&amp;quot;height&amp;quot;:            350,
&amp;quot;credits&amp;quot;: {
 &amp;quot;href&amp;quot;: null,
&amp;quot;text&amp;quot;: null
},
&amp;quot;exporting&amp;quot;: {
 &amp;quot;enabled&amp;quot;: false
},
&amp;quot;title&amp;quot;: {
 &amp;quot;text&amp;quot;: &amp;quot;折扣為 5-9% 之銷量、銷售成長率變化&amp;quot;
},
&amp;quot;yAxis&amp;quot;: [
 {
 &amp;quot;title&amp;quot;: {
 &amp;quot;text&amp;quot;: &amp;quot;No. of event&amp;quot;
}
},
{
 &amp;quot;title&amp;quot;: {
 &amp;quot;text&amp;quot;: &amp;quot;Unit/ Revenue Lift %&amp;quot;
},
&amp;quot;opposite&amp;quot;: true
}
],
&amp;quot;xAxis&amp;quot;: [
 {
 &amp;quot;categories&amp;quot;: [ &amp;quot;Jan&amp;quot;, &amp;quot;Feb&amp;quot;, &amp;quot;Mar&amp;quot;, &amp;quot;Apr&amp;quot;, &amp;quot;May&amp;quot;, &amp;quot;Jun&amp;quot;, &amp;quot;Jul&amp;quot;, &amp;quot;Aug&amp;quot;, &amp;quot;Sep&amp;quot;, &amp;quot;Oct&amp;quot;, &amp;quot;Nov&amp;quot;, &amp;quot;Dec&amp;quot; ]
}
],
&amp;quot;series&amp;quot;: [
 {
 &amp;quot;name&amp;quot;: &amp;quot;No. of event&amp;quot;,
&amp;quot;type&amp;quot;: &amp;quot;column&amp;quot;,
&amp;quot;color&amp;quot;: &amp;quot;#C8C8C8&amp;quot;,
&amp;quot;data&amp;quot;: [
 125,
116,
115,
136,
136,
126,
100,
98,
92,
104,
81,
81
]
},
{
 &amp;quot;name&amp;quot;: &amp;quot;Unit Lift&amp;quot;,
&amp;quot;type&amp;quot;: &amp;quot;spline&amp;quot;,
&amp;quot;color&amp;quot;: &amp;quot;#63CCCA&amp;quot;,
&amp;quot;data&amp;quot;: [
         134.09,
            54,
         -11.2,
          3.64,
         11.54,
         16.67,
         -22.3,
        -35.77,
        -29.17,
         11.95,
         23.17,
         19.76
],
&amp;quot;yAxis&amp;quot;:              1
},
{
 &amp;quot;name&amp;quot;: &amp;quot;Revenue Lift&amp;quot;,
&amp;quot;type&amp;quot;: &amp;quot;spline&amp;quot;,
&amp;quot;color&amp;quot;: &amp;quot;#FF9D15&amp;quot;,
&amp;quot;data&amp;quot;: [
         123.54,
         46.19,
        -16.92,
         -6.56,
          3.18,
         12.44,
        -29.79,
        -39.81,
        -35.29,
          6.48,
         18.12,
         14.76
],
&amp;quot;yAxis&amp;quot;:              1
}
],
&amp;quot;tooltip&amp;quot;: {
 &amp;quot;pointFormat&amp;quot;: &amp;quot;{series.name}:&amp;lt;b&amp;gt;{point.y}&amp;lt;/b&amp;gt;&amp;lt;br/&amp;gt;&amp;quot;
},
&amp;quot;id&amp;quot;: &amp;quot;chart59c7b825599&amp;quot;,
&amp;quot;chart&amp;quot;: {
 &amp;quot;renderTo&amp;quot;: &amp;quot;chart59c7b825599&amp;quot;
}
});
        });
    })(jQuery);
&amp;lt;/script&amp;gt;

    &amp;lt;script&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt; ' scrolling='no' frameBorder='0' seamless class='rChart  highcharts  ' id='iframe-chart59c7b825599'&gt; &lt;/iframe&gt;

&lt;p&gt;&lt;style&gt;iframe.rChart{ width: 100%; height: 400px;}&lt;/style&gt;&lt;/p&gt;</summary><category term="plot"></category></entry><entry><title>Docker基礎概念、建立映像檔與下載實作</title><link href="/dockerji-chu-gai-nian-jian-li-ying-xiang-dang-yu-xia-zai-shi-zuo.html" rel="alternate"></link><published>2016-03-04T00:00:00+08:00</published><author><name>YD</name></author><id>tag:,2016-03-04:dockerji-chu-gai-nian-jian-li-ying-xiang-dang-yu-xia-zai-shi-zuo.html</id><summary type="html">&lt;script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"&gt;
MathJax.Hub.Config({
  tex2jax: {
    inlineMath: [ ['$','$'], ['\\(','\\)'] ]
  }
});
(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
})(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

ga('create', 'UA-77164531-1', 'auto');
ga('send', 'pageview');

&lt;/script&gt;

&lt;p&gt;Docker 的基礎是 Linux 容器（LXC）等技術。&lt;/p&gt;
&lt;p&gt;容器是在作業系統層面上實作虛擬化，直接使用本地主機的作業系統，而傳統方式則是在硬體層面實作。&lt;/p&gt;
&lt;p&gt;容器除了執行其中應用外，基本不消耗額外的系統資源，使得應用的效能很高，同時系統資源消耗更少。傳統虛擬機方式執行 10 個不同的應用就要啟動 10 個虛擬機，而 Docker 只需要啟動 10 個隔離的應用即可。&lt;/p&gt;
&lt;p&gt;在O SX系統下，docker daemon(container) 的執行位置是在Linux VM下(docker-machine)，而VM完全是在RAM下運作。因此在container映射的埠應為docker-machine的ip而非本地端的80。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$docker port &amp;lt;container name&amp;gt;&lt;/code&gt; //80/tcp -&amp;gt; 0.0.0.0:49157 表，container port 80映設至VM(docker-machine)之49157。因此如果在網頁端執行 &lt;code&gt;localhost:49157&lt;/code&gt; 是不會有東西的，必須執行&lt;code&gt;$ docker-machine ip &amp;lt;machine name&amp;gt;&lt;/code&gt; 的ip (如192.168.99.100:49157)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Docker三元素：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;image 映像檔&lt;/li&gt;
&lt;li&gt;container 容器&lt;/li&gt;
&lt;li&gt;repository 倉庫 （儲存映像檔的場所）  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;映像檔：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;唯讀模板，可包含一個完整的作業系統環境(ubuntu)，裡面僅安裝Apache及使用者自訂的應用程式。&lt;/li&gt;
&lt;li&gt;用來建立容器  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;容器：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;容器是從映像檔建立執行的「實例」&lt;/li&gt;
&lt;li&gt;容器可是一個簡易版的Linux環境，和映像檔的差別是容器啟動後是建立一層寫層作為最上層  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;docker pull registry.hub.docker.com/ubuntu:12.04&lt;/code&gt; 命令，即從註冊服務器 &lt;code&gt;registry.hub.docker.com&lt;/code&gt; 中的 &lt;code&gt;ubuntu&lt;/code&gt; 倉庫來下載標記為 &lt;code&gt;12.04&lt;/code&gt; 的映像檔。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker run -t -i ubuntu:14.04 /bin/bash&lt;/code&gt; 即可隨時使用該映像檔了，例如建立一個容器，讓其中執行 bash。  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker images&lt;/code&gt; 顯示已有的映像檔  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker run -d -P --name web nginx&lt;/code&gt; run指令只有打開容器並結束。 &lt;code&gt;-d&lt;/code&gt; 是讓容器在run後繼續在背景執行，而 &lt;code&gt;-P&lt;/code&gt; 是接收容器埠到本機， &lt;code&gt;--name&lt;/code&gt; 後面給容器一個命名(此例為web)。  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker ps&lt;/code&gt; 查看目前容器狀態  &lt;/p&gt;
&lt;p&gt;&lt;a href="https://docs.docker.com/linux/"&gt;Docker engine for linux 教學&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;以Dockerfile建立映像檔：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;進入VM後，先建立一個空的資料夾，內部放入Dockerfile及其相依套件之.sh檔，接著cd至該目錄後，輸入指令&lt;code&gt;docker build -t "&amp;lt;repositoryName&amp;gt;:&amp;lt;tag&amp;gt;" .&lt;/code&gt; &lt;code&gt;-t&lt;/code&gt;為標記此映像檔的信息（給使用者），&lt;code&gt;.&lt;/code&gt; 為目前所在路徑，即Dockerfile的路徑。  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上傳映像檔上傳hub：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一旦image建好後，可用&lt;code&gt;docker images&lt;/code&gt; 查看。接著可以更改
  &lt;code&gt;docker tag 7d9495d03763 &amp;lt;account&amp;gt;/&amp;lt;repositoryName&amp;gt;:&amp;lt;tag&amp;gt;&lt;/code&gt; 接著再看&lt;code&gt;docker images&lt;/code&gt;會發現有兩個同樣images id。&lt;code&gt;docker login --username &amp;lt;user name&amp;gt; --email &amp;lt;mail&amp;gt;&lt;/code&gt; 後輸入密碼，登入成功輸入 &lt;code&gt;docker push &amp;lt;repositoryName&amp;gt;&lt;/code&gt; 就成功了！&lt;code&gt;docker rmi -f &amp;lt;image id&amp;gt;&lt;/code&gt; &lt;code&gt;-f&lt;/code&gt;強制刪除映像檔指令&lt;code&gt;docker run &amp;lt;repositoryName&amp;gt;&lt;/code&gt; 等同於 docker pull and run &lt;repositoryName&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="docker"></category></entry><entry><title>畢業這回事</title><link href="/bi-ye-zhe-hui-shi.html" rel="alternate"></link><published>2016-02-18T00:00:00+08:00</published><author><name>YD</name></author><id>tag:,2016-02-18:bi-ye-zhe-hui-shi.html</id><summary type="html">&lt;script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"&gt;
MathJax.Hub.Config({
  tex2jax: {
    inlineMath: [ ['$','$'], ['\\(','\\)'] ]
  }
});
(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
})(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

ga('create', 'UA-77164531-1', 'auto');
ga('send', 'pageview');

&lt;/script&gt;

&lt;p&gt;&lt;img class='shaped' src="https://aady5566.files.wordpress.com/2016/02/defenseroom.jpg" width="500" height="270" /&gt;&lt;/p&gt;
&lt;p&gt;給自己一個新的空間上傳自己的想法心得、或是一些筆記。&lt;/p&gt;
&lt;p&gt;其實面對畢業，沒有太多的自豪與欣慰。碩二開始的重心一直是兩件事: 學業和工作。這是一個挑戰，我覺得相較念書而言，工作環境反而是較大的壓力源，公司的同事各個都很強，而且很認真。我現在半路出家又是自學，覺得有想向手無寸鐵沒有打鬥經驗被丟在戰場上的感覺，非常恐懼。  我不想變成公司「可有可無」的角色，大家對我期望很高，我該盡力對得起夥伴們，也該對得起自己，這是自己選擇的路，既然有好機緣，就該好好把握。&lt;/p&gt;
&lt;p&gt;這讓我想到，兩年前遇到的同梯預官朋友們，覺得他們都是很有想法，願意挑戰的同袍。好幾個還是持續聯絡，往各方發展，而且有領導特質的真的不在少數。比起他們我真的是保守很多，總是讓自己處在進可攻退可守的安全線內，但是沒有放下一切追求夢想的勇氣...。&lt;/p&gt;
&lt;p&gt;下週會是真的出社會的第一步，心態上的轉換是一定要的，全力工作，看看自己的能耐到多少。秉鴻也鼓勵：「時間會改變一個人。」看到Line的執行長森川亮提到「享受不安」，才是最好的生存方式，這不是我一直以來抱持的想法嗎?&lt;/p&gt;
&lt;p&gt;未來如何轉變誰也不知，但求問心無愧，盡自己所能。然後，別讓自己成為技術咖，脫離人性。&lt;/p&gt;</summary><category term="School"></category></entry></feed>